#!/usr/bin/env php

<?php

$basedir  = __DIR__;
$no_check = ["core","library","release"];
use core\base\Loader;
use core\config\Config;

require_once __DIR__ . DIRECTORY_SEPARATOR . 'release' . DIRECTORY_SEPARATOR . "Common.php";
require_once __DIR__ . DIRECTORY_SEPARATOR. 'release' . DIRECTORY_SEPARATOR . "JavascriptPacker.php";
require_once __DIR__ . DIRECTORY_SEPARATOR . 'release' . DIRECTORY_SEPARATOR . "Single.php";
require_once __DIR__ . DIRECTORY_SEPARATOR . 'release' . DIRECTORY_SEPARATOR . "CompressCss.php";
require_once __DIR__ . DIRECTORY_SEPARATOR . 'release' . DIRECTORY_SEPARATOR . "CompressHtmlOrTpl.php";
require_once __DIR__ . DIRECTORY_SEPARATOR . 'release' . DIRECTORY_SEPARATOR . "CompressJs.php";


function check_frame()
{
    do_file(get_all_file(__DIR__), function ($file) {
        if (substr($file, strrpos($file, ".php")) !== ".php") return;
        $content = strtolower(file_get_contents($file));

        $functions = [
            '/catch\((ExitApp|Exception)/' => '直接捕获Exception或ExitApp异常可能导致无法正确退出App，请捕获具体异常',
            '/\s+(echo|var_dump|die|exit|print|printf)(\(|\s)/' => '输出内容请直接return，调试输出请使用内置函数，退出程序运行请使用App::exit函数',
            '/(\s|\(|=)(system|passthru|shell_exec|exec|popen|proc_open)\(/' => "可能导致系统命令执行，属于高危函数，请谨慎使用。",
            '/(\s|\(|=)(eval|assert|call_user_func|gzinflate|gzuncompress|gzdecode|str_rot13)\(/' => "可能导致任意代码执行，请谨慎使用。",
            '/(\s|\(|=)(require|require_once|include|include_once)\(/' => "可能导致任意文件包含，代码中请直接规范使用命名空间来避免包含文件。",
            '/\$_(GET|POST|REQUEST|COOKIE|SERVER|FILES)/' => "可能导致不可控的用户输入，请使用内置的arg函数获取用户数据。",
            '/(\$\w+)\(/' => "可能导致不可控的函数执行，请尽量明确执行函数。",
        ];

        foreach ($functions as $key => $value) {
            preg_match_all($key, $content, $matches);
            if (sizeof($matches) != 0) {
                if (sizeof($matches[0]) != 0) {
                    $f = str_replace(__DIR__, "", $file);
                    echo "------------------------------------------------------------------------------------------------\n";
                    echo "[ - ] " . str_replace("\n", "", str_replace("(", "", trim($matches[0][0]))) . "调用检测\n";
                    echo "[ - ] 文件 => $f \n";
                    echo "[ - ] 处理建议 => $value \n";
                    echo "------------------------------------------------------------------------------------------------\n";
                }

            }
        }
    });
}
//项目打包
function package($param)
{
    check_frame();
    $new = dirname(__DIR__,) . DIRECTORY_SEPARATOR . "dist" . DIRECTORY_SEPARATOR . "temp";
    copy_dir(__DIR__, $new);
    del($new . DIRECTORY_SEPARATOR . "clean");
    del($new . DIRECTORY_SEPARATOR . "storage");
    del($new . DIRECTORY_SEPARATOR . "release");
    del($new . DIRECTORY_SEPARATOR . "Makefile");
    //App::run(true);
    $app = $new . DIRECTORY_SEPARATOR . "public" . DIRECTORY_SEPARATOR . "index.php";
    file_put_contents($app, str_replace("App::run(true);", "App::run(false);", file_get_contents($app)));
    define("APP_DIR", __DIR__);
    define("DS", DIRECTORY_SEPARATOR);
    include_once __DIR__ . DIRECTORY_SEPARATOR . 'core' . DIRECTORY_SEPARATOR . "helper.php";//载入内置助手函数
    include_once __DIR__ . DIRECTORY_SEPARATOR . 'core' . DIRECTORY_SEPARATOR . "base" . DIRECTORY_SEPARATOR . "Variables.php";// 加载变量
    include_once __DIR__ . DIRECTORY_SEPARATOR . 'core' . DIRECTORY_SEPARATOR . "base" . DIRECTORY_SEPARATOR . "Loader.php";// 加载自动加载器
    Loader::register();// 注册自动加载
    $frame = Config::getInstance("config")->setLocation($new . DIRECTORY_SEPARATOR . "config" . DIRECTORY_SEPARATOR)->get("frame");
    $hosts = $frame["host"];
    echo "\n[项目打包程序]目前绑定域名如下：";
    for ($i = 0; $i < sizeof($hosts); $i++) {
        $host = $hosts[$i];
        echo "\n$host";
        if (!in_array("--ignore", $param)) {
            $fh = fopen('php://stdin', 'r');
            echo "\n[项目打包程序]如需修改请输入新的域名,不修改请留空，删除请输入-1：";
            $str = fread($fh, 1000);
            fclose($fh);
            if (strpos($str, "-1") === 0) {
                echo "\n[项目打包程序]删除域名 {$hosts[$i]}";
                unset($hosts[$i]);
            } else if (strpos($str, "\n") === 0) {
                echo "\n[项目打包程序]{$hosts[$i]}无需修改。";
            } else {
                $hosts[$i] = str_replace("\n", "", $str);
                echo "\n[项目打包程序]域名修改为  {$hosts[$i]} 。";
            }
        }
    }
    $frame["host"] = $hosts;
    $app_name = $frame["app_name"];
    $ver_code = $frame["ver_code"];
    $ver_name = $frame["ver_name"];
    if (!in_array("--ignore", $param)) {
        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]项目名称（ $app_name ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["app_name"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["app_name"]}";
        }
        fclose($fh);

        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]更新版本号（ $ver_code ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["ver_code"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["ver_code"]}";
        }
        fclose($fh);

        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]更新版本名（ $ver_name ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["ver_name"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["ver_name"]}";
        }
        fclose($fh);
    }
    Config::getInstance("config")->setLocation($new . DIRECTORY_SEPARATOR . "config" . DIRECTORY_SEPARATOR)->set("frame", $frame);

    if (in_array("--compress", $param)) {
        compress($new);
    }
    if (in_array("--single", $param)) {
        $name = "single_{$app_name}_{$ver_name}_{$ver_code}";
        (new Single($name))->run($new);
        if (in_array("--compress", $param)) {
            compress(dirname(__DIR__) . DIRECTORY_SEPARATOR . "dist" . DIRECTORY_SEPARATOR . "$name.php", dirname(__DIR__) . DIRECTORY_SEPARATOR . "dist" . DIRECTORY_SEPARATOR . "compress_$name.php");
        }
    } else {
        if (in_array("--compress", $param)) {
            $app_name = "compress_$app_name";
        }
        $fileName = dirname(__DIR__) . "/dist/" . $app_name . "_" . $ver_name . "(" . $ver_code . ").zip";

        zip($new, $fileName);
        echo "\n[项目打包程序]php程序已打包至$fileName";
        del($new);
    }
}
function compress($from, $to = "")
{
    if (is_file($from)) {
        file_put_contents($to, php_strip_whitespace($from));
        return;
    }
    $dir_array = array();
    scan_dirs($from, scandir($from), $dir_array);
    if (is_array($dir_array) && count($dir_array) > 0) {
        foreach ($dir_array as $dir) {
            $files = scandir($dir);
            if (!is_array($files) || count($files) < 1) continue;
            foreach ($files as $file) {
                if (is_dir($file) || $file === '.' || $file === '..') continue;
                $file = $dir . DIRECTORY_SEPARATOR . $file;
                $fileInfo = pathinfo($file);
                if (!isset($fileInfo['extension']) ) continue;
                if(!is_file($file))continue;
                if ($fileInfo['extension'] === 'php') {
                    file_put_contents($file, php_strip_whitespace($file));
                } elseif ($fileInfo['extension'] === 'css') {
                    compressCss($file);
                } elseif ($fileInfo['extension'] === 'js') {
                    compressJs($file);
                } elseif ($fileInfo['extension'] === 'html' || $fileInfo['extension'] === 'tpl') {
                    compressHtmlOrTpl($file);
                }

            }
        }
    }
    echo "\n[信息]代码压缩完成！";
}
function empty_frame()
{
    $new = dirname(__DIR__,) . DIRECTORY_SEPARATOR . "dist" . DIRECTORY_SEPARATOR . "temp";
    copy_dir(__DIR__, $new);
    del($new . DIRECTORY_SEPARATOR . "clean");
    del($new . DIRECTORY_SEPARATOR . "storage");
    del($new . DIRECTORY_SEPARATOR . "app");
    del($new . DIRECTORY_SEPARATOR . "library");
    mk_dir($new . DIRECTORY_SEPARATOR . "app");
    file_put_contents($new . DIRECTORY_SEPARATOR . "app" . DIRECTORY_SEPARATOR . ".gitkeep", '');
    mk_dir($new . DIRECTORY_SEPARATOR . "library");
    file_put_contents($new . DIRECTORY_SEPARATOR . "library" . DIRECTORY_SEPARATOR . ".gitkeep", '');
    $fileName = dirname(__DIR__) . DIRECTORY_SEPARATOR . "dist" . DIRECTORY_SEPARATOR . "cleanphp.zip";
    zip($new . DIRECTORY_SEPARATOR, $fileName);
    del($new);
    echo "纯净版已打包到：$fileName";
}
function help()
{
    echo <<<EOF
Usage: ./clean [options] 
Options:
  empty                     导出不含拓展的纯净开发包
  release                      发布安装包.
    --single                    编译为单一文件.
    --compress                   代码压缩。
    --ignore                    不需要用户介入
EOF;
    return null;
}


if (!isset($argv[1]))
    return help();

switch ($argv[1]) {
    case "empty":
        empty_frame();
        break;
    case "release":
        package($argv);
        break;
    default:
        help();
}

