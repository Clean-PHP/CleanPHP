#!/usr/bin/env php
<?php

use core\base\Loader;
use core\config\Config;

/**
 * 文件夹删除或者文件删除
 * @param $dirname
 * @return bool
 */
function del($dirname): bool
{
    if (!is_dir($dirname)) {
        if (is_file($dirname))
            return unlink($dirname);
        else
            return false;
    }
    $handle = opendir($dirname); //打开目录
    while (($file = readdir($handle)) !== false) {
        if ($file != '.' && $file != '..') {
            //排除"."和"."
            $dir = $dirname . '/' . $file;
            is_dir($dir) ? del($dir) : unlink($dir);
        }
    }
    closedir($handle);
    return rmdir($dirname);
}


/**
 * 文件夹、文件拷贝
 *
 * @param string $src 来源文件夹、文件
 * @param string $dst 目的地文件夹、文件
 * @return void
 */
function copy_dir(string $src = '', string $dst = '')
{
    if (@is_file($src)) {
        copy($src, $dst);
    }

    if (empty($src) || empty($dst)) {
        return;
    }

    $dir = opendir($src);
    mk_dir($dst);
    while (false !== ($file = readdir($dir))) {
        if (($file != '.') && ($file != '..')) {
            if (is_dir($src . '/' . $file)) {
                copy_dir($src . '/' . $file, $dst . '/' . $file);
            } else {
                copy($src . '/' . $file, $dst . '/' . $file);
            }
        }
    }
    closedir($dir);
}

/**
 * 创建文件夹
 *
 * @param string $path 文件夹路径
 * @param bool $recursive 是否递归创建
 */
function mk_dir(string $path, bool $recursive = true)
{
    clearstatcache();
    if (!is_dir($path)) {
        @mkdir($path, 0777, $recursive);
    }
}


function zip($dir, $dst)
{
    $zip = new ZipArchive();
    if ($zip->open($dst, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
        add_file_to_zip($dir, $zip, $dir); //调用方法，对要打包的根目录进行操作，并将ZipArchive的对象传递给方法
    }
}

function add_file_to_zip($path, ZipArchive $zip, $replace)
{
    $handler = opendir($path); //打开当前文件夹由$path指定。
    while (($filename = readdir($handler)) !== false) {
        if (strpos($filename, ".") !== 0) {//文件夹文件名字为'.'和‘..'，不要对他们进行操作
            if (is_dir($path . "/" . $filename)) {// 如果读取的某个对象是文件夹，则递归
                add_file_to_zip($path . "/" . $filename, $zip, $replace);
            } else { //将文件加入zip对象
                var_dump($path);
                $zip->addFile($path . "/" . $filename);
                $zip->renameName($path . "/" . $filename, str_replace($replace, "", $path) . '/' . $filename);
            }
        }
    }
    @closedir($handler);
}

$no_check = ["/core"];
function get_all_file($dir): array
{
    global $no_check;
    $files = array();
    if ($head = opendir($dir)) {
        while (($entry = readdir($head)) !== false) {
            $file = str_replace("//", "/", str_replace(__DIR__, "", $dir) . '/' . $entry);
            $find = false;
            foreach ($no_check as $v) {
                if (strpos($file, $v) === 0) {
                    $find = true;
                    break;
                }
            }
            if ($find) continue;
            if (strpos($entry, ".") !== 0) {
                if (is_dir($dir . '/' . $entry)) {
                    $files[$entry] = get_all_file($dir . '/' . $entry);
                } else {
                    $files[] = $dir . '/' . $entry;
                }
            }
        }
    }
    closedir($head);
    return $files;
}

function do_file($fileList, $fnName)
{
    if (is_array($fileList) && sizeof($fileList) != 0) {
        foreach ($fileList as $key => $file) {
            do_file($file, $fnName);
        }
    }
    if (!is_array($fileList) && is_file($fileList)) {
        $fnName($fileList);
    }

}

function check_frame()
{
    do_file(get_all_file(__DIR__), function ($file) {
        preg_match_all("/(echo|var_dump|die|exit|print|printf)(\(|\s)/", strtolower(file_get_contents($file)), $matches);
        if (sizeof($matches) != 0) {
            if (sizeof($matches[0]) != 0) {
                echo "\n[错误]文件 $file 存在不规范的函数使用(" . str_replace("\n", "", str_replace("(", "", $matches[0][0])) . ")！处理建议：输出内容请直接return，调试输出请使用内置函数，退出程序运行请使用App::exit函数。";
            }
        }

        $functions = [
            '/(\s|\(|=)(system|passthru|shell_exec|exec|popen|proc_open)\(/' => "可能导致系统命令执行，属于高危函数，请谨慎使用。",
            '/(\s|\(|=)(eval|assert|call_user_func|gzinflate|gzuncompress|gzdecode|str_rot13)\(/' => "可能导致任意代码执行，请谨慎使用。",
            '/(\s|\(|=)(require|require_once|include|include_once)\(/' => "可能导致任意文件包含，代码中请直接规范使用命名空间来避免包含文件。",
            '/\$_(GET|POST|REQUEST|COOKIE|SERVER|FILES)/' => "可能导致不可控的用户输入，请使用内置的arg函数获取用户数据。",
            '/(\$\w+)\(/' => "可能导致不可控的函数执行，请尽量明确执行函数。",
        ];

        foreach ($functions as $key => $value) {
            preg_match_all($key, strtolower(file_get_contents($file)), $matches);
            if (sizeof($matches) != 0) {
                if (sizeof($matches[0]) != 0) {
                    echo "\n[警告]文件 $file 存在可疑的(" . str_replace("\n", "", str_replace("(", "", $matches[0][0])) . ")调用！处理建议：$value";
                }

            }
        }
    });
}

//项目打包
function package($param)
{
    check_frame();
    $new = dirname(__DIR__,).DIRECTORY_SEPARATOR . "dist".DIRECTORY_SEPARATOR."temp";
    copy_dir(__DIR__,$new);
    del($new.DIRECTORY_SEPARATOR."clean");
    del($new.DIRECTORY_SEPARATOR."storage");
    //App::run(true);
    $app = $new.DIRECTORY_SEPARATOR."public".DIRECTORY_SEPARATOR."index.php";
    file_put_contents($app,str_replace("App::run(true);","App::run(false);",file_get_contents($app)));
    define("APP_DIR",__DIR__);
    define("DS",DIRECTORY_SEPARATOR);
    include_once __DIR__ .DIRECTORY_SEPARATOR.'core'. DIRECTORY_SEPARATOR . "helper.php";//载入内置助手函数
    include_once __DIR__ .DIRECTORY_SEPARATOR.'core'. DIRECTORY_SEPARATOR. "base" . DIRECTORY_SEPARATOR . "Variables.php";// 加载变量
    include_once __DIR__ .DIRECTORY_SEPARATOR.'core'. DIRECTORY_SEPARATOR. "base" . DIRECTORY_SEPARATOR . "Loader.php";// 加载自动加载器
    Loader::register();// 注册自动加载
    $frame = Config::getInstance("config")->setLocation($new .DIRECTORY_SEPARATOR. "config".DIRECTORY_SEPARATOR)->get("frame");
    $hosts = $frame["host"];
    echo "\n[项目打包程序]目前绑定域名如下：";
    for ($i = 0; $i < sizeof($hosts); $i++) {
        $host = $hosts[$i];
        echo "\n$host";
        if(!in_array("--ignore",$param)){
            $fh = fopen('php://stdin', 'r');
            echo "\n[项目打包程序]如需修改请输入新的域名,不修改请留空，删除请输入-1：";
            $str = fread($fh, 1000);
            fclose($fh);
            if (strpos($str, "-1") === 0) {
                echo "\n[项目打包程序]删除域名 {$hosts[$i]}";
                unset($hosts[$i]);
            } else if (strpos($str, "\n") === 0) {
                echo "\n[项目打包程序]{$hosts[$i]}无需修改。";
            } else {
                $hosts[$i] = str_replace("\n", "", $str);
                echo "\n[项目打包程序]域名修改为  {$hosts[$i]} 。";
            }
        }
    }
    $frame["host"] = $hosts;
    $app_name = $frame["app_name"];
    $ver_code = $frame["ver_code"];
    $ver_name = $frame["ver_name"];
    if(!in_array("--ignore",$param)) {
        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]项目名称（ $app_name ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["app_name"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["app_name"]}";
        }
        fclose($fh);

        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]更新版本号（ $ver_code ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["ver_code"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["ver_code"]}";
        }
        fclose($fh);

        $fh = fopen('php://stdin', 'r');
        echo "\n[项目打包程序]更新版本名（ $ver_name ），不修改请留空：";
        $str = fread($fh, 1000);
        if (strpos($str, "\n") === 0) {
            echo "\n[项目打包程序]无需修改。";
        } else {
            $frame["ver_name"] = str_replace("\n", "", $str);
            echo "\n[项目打包程序]修改项目名称为：{$frame["ver_name"]}";
        }
        fclose($fh);
    }
    Config::getInstance("config")->setLocation($new .DIRECTORY_SEPARATOR. "config".DIRECTORY_SEPARATOR)->set("frame",$frame);

    if(in_array("--compress",$param)){
        compress($new);
    }
    if(in_array("--single",$param)){
        $name = "single_{$app_name}_{$ver_name}_{$ver_code}";
        (new Single($name))->run($new);
        if(in_array("--compress",$param)){
            compress(dirname(__DIR__).DIRECTORY_SEPARATOR."dist".DIRECTORY_SEPARATOR."$name.php",dirname(__DIR__).DIRECTORY_SEPARATOR."dist".DIRECTORY_SEPARATOR."compress_$name.php");
        }
    }else{
        if(in_array("--compress",$param)){
            $app_name = "compress_$app_name";
        }
        $fileName = dirname(__DIR__) . "/dist/" . $app_name . "_" . $ver_name . "(" . $ver_code . ").zip";

        zip($new, $fileName);
        echo "\n[项目打包程序]php程序已打包至$fileName";
        del($new);
    }
}
class Single
{
    private $fp;
    public function __construct($fileName)
    {
        $file = dirname(__DIR__). DIRECTORY_SEPARATOR."dist".DIRECTORY_SEPARATOR."$fileName.php";
        del($file);
        $this->fp = fopen($file, "w+");
    }

    public function __destruct()
    {
        fclose($this->fp);
    }

    function run($new)
    {

        fwrite($this->fp, '<?php
$randKey = "');
        $token = uniqid("key1_");
        fwrite($this->fp, uniqid("key2_"));
        fwrite($this->fp, '";$token="'.$token);
        fwrite($this->fp, '";
        $path = dirname(__FILE__)."/tmp_".md5($randKey)."/";
        function deldir($dir) {$dh = opendir($dir);while ($file = readdir($dh)) {if($file != "." && $file!="..") {$fullpath = $dir."/".$file;if(!is_dir($fullpath)) {unlink($fullpath);} else {deldir($fullpath);}}}closedir($dh);if(rmdir($dir)) {return true;} else {return false;}}
        if(isset($_GET["token"])&&$token===$_GET["token"]){
            deldir($path);
            unlink(__FILE__);
            exit("bye!");
        }
$path = dirname(__FILE__)."/tmp_".md5($randKey)."/";
if(!is_dir($path)){
mkdir($path,0777,true);
$codes = [
'
        );
        $this->scan($new);
        fwrite($this->fp, '

];
foreach($codes as $item=>$data){

$p =  pathinfo($path.$item,PATHINFO_DIRNAME);
if(!is_dir($p)){
mkdir($p,0777,true);
}
file_put_contents($path.$item,base64_decode($data));
}
}
include $path."public/index.php";
'
        );
        del($new);
        echo "\n[信息]PHP痕迹清除密钥：$token ";
        echo "\n[信息]单一文件打包完成. ";
    }


    function scan($dirname)
    {
        $dirArr = scandir($dirname);
        foreach ($dirArr as $v) {
            $filename = $dirname . DIRECTORY_SEPARATOR . $v;
            if (strpos($v, ".") !== 0) {
                if (is_dir($filename)) {
                    $this->scan($filename);
                } else {
                    if ($v !== "clean") {
                        fwrite($this->fp, '"' . str_replace(dirname(__DIR__) .DIRECTORY_SEPARATOR. "dist".DIRECTORY_SEPARATOR."temp".DIRECTORY_SEPARATOR, "", $filename) . '"=>"' . base64_encode(file_get_contents($filename)) . '",');
                    }
                }
            }
        }
    }
}

function compress($from,$to=""){
        if(is_file($from)){
            file_put_contents($to, php_strip_whitespace($from));
            return;
        }
        $dir_array = array();
        scan_dirs($from, scandir($from), $dir_array);
        if (is_array($dir_array) && count($dir_array) > 0) {
            foreach ($dir_array as $dir) {
                $files = scandir($dir);
                if (!is_array($files) || count($files) < 1) continue;
                foreach ($files as $file) {
                    if (is_dir($file) || $file === '.' || $file === '..') continue;
                    $file = $dir . DIRECTORY_SEPARATOR . $file;
                    $fileInfo = pathinfo($file);
                    if (!isset($fileInfo['extension']) || $fileInfo['extension'] != 'php') continue;
                    file_put_contents($file, php_strip_whitespace($file));
                }
            }
        }
        echo "\n[信息]代码压缩完成！";
    }

    function scan_dirs($path, $dirs, &$dir_array)
    {
        if (!is_array($dirs) || count($dirs) < 1) return;
        foreach ($dirs as $dir) {
            if ($dir === '.' || $dir === '..') continue;
            $dir = $path . DIRECTORY_SEPARATOR . $dir;
            if (is_dir($dir)) {
                array_push($dir_array, $dir);
                scan_dirs($dir, scandir($dir), $dir_array);
            }
        }
    }

function empty_frame()
{
    $new = dirname(__DIR__,).DIRECTORY_SEPARATOR . "dist".DIRECTORY_SEPARATOR."temp";
    copy_dir(__DIR__,$new);
    del($new.DIRECTORY_SEPARATOR."clean");
    del($new.DIRECTORY_SEPARATOR."storage");
    del($new.DIRECTORY_SEPARATOR."app");
    del($new.DIRECTORY_SEPARATOR."library");
    mk_dir($new.DIRECTORY_SEPARATOR."app");
    file_put_contents($new.DIRECTORY_SEPARATOR."app".DIRECTORY_SEPARATOR.".gitkeep",'');
    mk_dir($new.DIRECTORY_SEPARATOR."library");
    file_put_contents($new.DIRECTORY_SEPARATOR."library".DIRECTORY_SEPARATOR.".gitkeep",'');
    $fileName = dirname(__DIR__) . DIRECTORY_SEPARATOR."dist".DIRECTORY_SEPARATOR . "cleanphp.zip";
    zip($new.DIRECTORY_SEPARATOR, $fileName);
    del($new);
    echo "纯净版已打包到：$fileName";
}

function help()
{
    echo <<<EOF
Usage: ./clean [options] 
Options:
  empty                     导出不含拓展的纯净开发包
  release                      发布安装包.
    --single                    编译为单一文件.
    --compress                   代码压缩。
    --ignore                    不需要用户介入
EOF;
    return null;
}



if (!isset($argv[1]))
    return help();

switch ($argv[1]) {
    case "empty":
        empty_frame();
        break;
    case "release":
        package($argv);
        break;
    default:
        help();
}

